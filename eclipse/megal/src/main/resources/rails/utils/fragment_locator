#! /usr/bin/env ruby
$VERBOSE = nil
require 'parser/current'
require 'net/http'
require 'json'

module Locator
  class ClassLocator < Parser::AST::Processor
    def on_class(node)
      {
          resource: @@input + '/class/' + node.children.first.children[1].to_s,
          name: node.children.first.children[1].to_s,
          classifier: 'class'
      }
    end
  end

  class MethodLocator < Parser::AST::Processor
    def on_def(node)
      {
          resource: @@input + '/method/'+ node.children.first.to_s,
          name: node.children.first.to_s,
          classifier: 'method'
      }
    end
  end

end

def extract_fragments(content)
  parser = Parser::CurrentRuby.new
  parser.diagnostics.consumer = lambda do |diag|
    puts diag.render
  end

  buffer = Parser::Source::Buffer.new('(string)')
  buffer.source = content
  ast = parser.parse(buffer)
  class_locator = Locator::ClassLocator.new
  method_locator = Locator::MethodLocator.new
  result_class = class_locator.process(ast)
  result_method = method_locator.process(ast)

  puts 'Class Fragments: '
  puts result_class.to_s

  puts 'Method Fragments'
  result_method.children.last.children.each { |m_fragments|
    puts m_fragments.to_s

  }
end


@@input = 'http://101companies.org/resources/contributions/rubyonrails/companies/app/controllers/companies_controller.rb'
uri = URI(@@input)
http = Net::HTTP.new(uri.host, uri.port)
headers = {
    'Accept' => 'application/json'
}

code = http.head(uri.path, headers).code.to_i
if (code >= 200 && code < 300)
  response = http.get(uri.path, headers)
  response_hash = JSON.parse(response.body, symbolize_names: true)
  extract_fragments(response_hash[:content])
end






